#!/usr/bin/python -u

import os
import sys
import time
import re

usageString = "Usage:\n%s [options]\n" % sys.argv[0]
usageString = usageString + "Options:\n" + \
    "    --nRepeats n       The repeats argument to UnifiedBootstrap\n" + \
    "    --nCores n         The number of cores to use (6144 default, must be a multiple of nCoresPerNode)\n" + \
    "    --nNodes n         The number of nodes to use (overrides nCores)\n" + \
    "    --nCoresPerNode n  The number of cores per node (24 should not normally be changed)\n" + \
    "    --nHours n         The number of hours to run (3 default)\n" + \
    "    --nMinutes n       The number of minutes to run (0 default)\n" + \
    "    --test             20 minute queue\n" + \
    "    --short            1 hour queue\n" + \
    "    --medium           3 hour queue\n" + \
    "    --long             12 hour queue\n" + \
    "    --low              low priority queue\n" + \
    "    --account name     choose an account (b16)\n" + \
    "    --coreDump         enable core dumps\n" 

defaultHours = 3
nRepeats = 1
nHours = 0
nMinutes = 0
nCoresPerNode = 24 # current recommended value for Archer
nCores = 6144 # must be a multiple of nCoresPerNode
nNodes = 0
account = 'b16'
coreDump = 0
regularPriority = 1

i = 1;
while i < len(sys.argv):
    if sys.argv[i] == "--nRepeats":
        i = i + 1
        if i >= len(sys.argv): PrintExit(usageString)
        nRepeats = int(sys.argv[i])
        i = i + 1
        continue

    if sys.argv[i] == "--nCores":
        i = i + 1
        if i >= len(sys.argv): PrintExit(usageString)
        nCores = int(sys.argv[i])
        i = i + 1
        continue

    if sys.argv[i] == "--nNodes":
        i = i + 1
        if i >= len(sys.argv): PrintExit(usageString)
        nNodes = int(sys.argv[i])
        i = i + 1
        continue

    if sys.argv[i] == "--nCoresPerNode":
        i = i + 1
        if i >= len(sys.argv): PrintExit(usageString)
        nCoresPerNode = int(sys.argv[i])
        i = i + 1
        continue

    if sys.argv[i] == "--nHours":
        i = i + 1
        if i >= len(sys.argv): PrintExit(usageString)
        nHours = int(sys.argv[i])
        i = i + 1
        continue

    if sys.argv[i] == "--nMinutes":
        i = i + 1
        if i >= len(sys.argv): PrintExit(usageString)
        nMinutes = int(sys.argv[i])
        if nMinutes < 0:
            nMinutes = 0
        if nMinutes > 59:
            nHours = nHours + int(nMinutes / 60)
            nMinutes = nMinutes % 60
        i = i + 1
        continue

    if sys.argv[i] == "--test":
        i = i + 1
        nMinutes = 20
        nHours = 0
        nNodes = 128
        continue
        
    if sys.argv[i] == "--short":
        i = i + 1
        nMinutes = 0
        nHours = 1
        continue
        
    if sys.argv[i] == "--medium" or sys.argv[i] == "--med":
        i = i + 1
        nMinutes = 0
        nHours = 3
        continue
        
    if sys.argv[i] == "--long":
        i = i + 1
        nMinutes = 0
        nHours = 12
        continue
        
    if sys.argv[i] == "--low":
        i = i + 1
        nMinutes = 0
        nHours = 3
        regularPriority = 0
        if (nNodes <= 0 or nNodes > 512):
            nNodes = 512
        continue
        
    if sys.argv[i] == "--account":
        i = i + 1
        if i >= len(sys.argv): PrintExit(usageString)
        account = sys.argv[i]
        i = i + 1
        continue

    if sys.argv[i] == "--coreDump":
        i = i + 1
        coreDump = 1
        continue

    sys.stderr.write(usageString + "\n");
    sys.exit(1)

if (nHours <= 0 and nMinutes <= 0):
    nHours = defaultHours
    nMinutes = 0

if (nNodes == 0):
    nNodes = nCores / nCoresPerNode
else:
    nCores = nNodes * nCoresPerNode

if (nCores % nCoresPerNode) != 0:
    sys.stderr.write(usageString + "\n");
    sys.stderr.write('nCores must be a multiple of %d\n' % (nCoresPerNode));
    exit(1)
    
executable = "/home/b16/b16/wisb16/work/UnifiedBootstrapAsync"

print "Archer 24 cores/node 1-2048 nodes"
print "Requested %d Cores (%d nodes at %d cores per node)" % (nCores, nNodes, nCoresPerNode)
print "Requested %02d:%02d:00\n" % (nHours, nMinutes)

f  = '#submit.pbs file generated by %s\n' % (sys.argv[0])
f += '#PBS -N GaitSym\n'    
f += '#PBS -l select=%d\n' % nNodes
f += '#PBS -l walltime=%02d:%02d:00\n' % (nHours, nMinutes)
f += '#PBS -A %s\n' % account

if regularPriority == 0:
    f += '#PBS -q low\n'
f += '\n' 
f += 'export PBS_O_WORKDIR=$(readlink -f $PBS_O_WORKDIR)\n'
f += 'export OMP_NUM_THREADS=1\n'
f += 'cd %s\n' % os.getcwd()

if coreDump == 0:
    f += 'ulimit -c 0\n' 
else:
    f += 'ulimit -c unlimited\n' 
f += '\n' 

f += 'aprun -n %d %s --repeats %d --serverArgs -d 0 --clientArgs -q\n' % (nCores, executable, nRepeats)

jobSubmitFile = f

out = open("archer_submit.pbs", "w")
out.write(jobSubmitFile);
out.close()

# use the EPCC supplied checkscript command
checkscript_command = "checkScript archer_submit.pbs"
print checkscript_command
checkscript_text = os.popen(checkscript_command).read()
print checkscript_text

qsub_command = "qsub archer_submit.pbs"
print qsub_command
qsub_text = os.popen(qsub_command).read()
print qsub_text

qstat_command = "qstat -u wisb16"
print qstat_command
qstat_text = os.popen(qstat_command).read()
print qstat_text

job_number = int(re.findall(r'\d+', qsub_text)[0])
current_time = time.localtime()
logfile_name = 'Submit_Log_%s_%d.txt' % (time.strftime("%Y-%m-%d_%H.%M.%S", current_time), job_number)
fout = open(logfile_name, 'w')
fout.write('%s\n\n' % time.ctime(time.mktime(current_time)))
fout.write(" ".join(sys.argv) + '\n\n')
fout.write(checkscript_command + '\n')
fout.write(checkscript_text + '\n')
fout.write(qsub_command + '\n')
fout.write(qsub_text + '\n')
fout.write(qstat_command + '\n')
fout.write(qstat_text + '\n')
fout.close()

